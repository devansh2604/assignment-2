#include <iostream>
using namespace std;

// Triplet format: t[0] = {rows, cols, nonzeros}; t[1..nnz] = {r,c,val}
void printTriplet(int T[][3], int nnz) {
    cout << "ROW COL VAL\n";
    for (int i = 0; i <= nnz; i++)
        cout << T[i][0] << "   " << T[i][1] << "   " << T[i][2] << "\n";
}

void denseToTriplet(int A[5][5], int R, int C, int T[][3], int &nnz) {
    nnz = 0;
    for (int i = 0; i < R; i++)
        for (int j = 0; j < C; j++)
            if (A[i][j] != 0) {
                nnz++;
                T[nnz][0] = i; T[nnz][1] = j; T[nnz][2] = A[i][j];
            }
    T[0][0] = R; T[0][1] = C; T[0][2] = nnz;
}

void transposeTriplet(int S[][3], int ST[][3]) {
    int R = S[0][0], C = S[0][1], N = S[0][2], k = 1;
    ST[0][0] = C; ST[0][1] = R; ST[0][2] = N;
    for (int col = 0; col < C; col++)
        for (int i = 1; i <= N; i++)
            if (S[i][1] == col) { ST[k][0] = S[i][1]; ST[k][1] = S[i][0]; ST[k][2] = S[i][2]; k++; }
}

int main() {
    // Sample dense matrices (feel free to change)
    int A[5][5] = {{1,0,0,0,2},{0,0,3,0,0},{0,0,0,0,0},{0,4,0,0,0},{0,0,0,5,0}};
    int B[5][5] = {{0,0,6,0,0},{0,0,0,0,0},{7,0,0,0,0},{0,0,0,0,8},{0,0,0,0,0}};

    int SA[30][3], SB[30][3], ST[30][3], SC[60][3];
    int nnzA, nnzB;

    denseToTriplet(A,5,5,SA,nnzA);
    denseToTriplet(B,5,5,SB,nnzB);

    // (a) Transpose
    transposeTriplet(SA, ST);
    cout << "A in Triplet:\n";  printTriplet(SA, nnzA);
    cout << "\nTranspose(A):\n"; printTriplet(ST, nnzA);

    // (b) Addition  C = A + B  (both triplets, simple merge)
    int i = 1, j = 1, k = 1;
    while (i <= nnzA && j <= nnzB) {
        if (SA[i][0] < SB[j][0] || (SA[i][0]==SB[j][0] && SA[i][1] < SB[j][1])) {
            SC[k][0]=SA[i][0]; SC[k][1]=SA[i][1]; SC[k][2]=SA[i][2]; i++; k++;
        } else if (SB[j][0] < SA[i][0] || (SB[j][0]==SA[i][0] && SB[j][1] < SA[i][1])) {
            SC[k][0]=SB[j][0]; SC[k][1]=SB[j][1]; SC[k][2]=SB[j][2]; j++; k++;
        } else { // same position
            int v = SA[i][2] + SB[j][2];
            if (v != 0) { SC[k][0]=SA[i][0]; SC[k][1]=SA[i][1]; SC[k][2]=v; k++; }
            i++; j++;
        }
    }
    while (i <= nnzA) { SC[k][0]=SA[i][0]; SC[k][1]=SA[i][1]; SC[k][2]=SA[i][2]; i++; k++; }
    while (j <= nnzB) { SC[k][0]=SB[j][0]; SC[k][1]=SB[j][1]; SC[k][2]=SB[j][2]; j++; k++; }
    SC[0][0]=SA[0][0]; SC[0][1]=SA[0][1]; SC[0][2]=k-1;

    cout << "\nA + B (Triplet):\n"; printTriplet(SC, k-1);

    // (c) Multiplication  C = A * B  (triplet Ã— triplet, simple accumulate)
    int R = SA[0][0], Cc = SB[0][1];
    int Acc[5][5] = {0}; // accumulate into dense (simple and clear)
    for (int p = 1; p <= nnzA; p++) {
        int ai = SA[p][0], ak = SA[p][1], av = SA[p][2];
        for (int q = 1; q <= nnzB; q++) {
            if (SB[q][0] == ak) {
                int bj = SB[q][1], bv = SB[q][2];
                Acc[ai][bj] += av * bv;
            }
        }
    }
    int SM[60][3], nnzM = 0;
    denseToTriplet(Acc, R, Cc, SM, nnzM);
    cout << "\nA * B (Triplet):\n"; printTriplet(SM, nnzM);

    return 0;
}
